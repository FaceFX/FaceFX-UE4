#pragma once

#include "FaceFxAsset.h"
#include "FaceFxData.h"
#include "FaceFxActor.generated.h"

/** The data that holds the FaceFX related data without the animations. The binary data in here was generated by the FaceFX compiler for all 3 target platforms and get written into m_platformData. 
 During cooking we remove all unnecessary data and move all into the first index location */

/** Asset that can be assigned to FaceFxComponents and which contain the FaceFX runtime data */
UCLASS(hideCategories=Object)
class FACEFX_API UFaceFxActor : public UFaceFxAsset
{
	GENERATED_UCLASS_BODY()

public:

#if WITH_EDITOR

	friend struct FFaceFxEditorTools;

	//UObject
	virtual void Serialize(FArchive& Ar) override;
	//~UObject

	/**
	* Links this set to the given animation set
	* @param animSet The asset to link with
	*/
	inline void LinkTo(class UFaceFxAnimSet* animSet)
	{
		m_animationSets.AddUnique(animSet);
	}

	/**
	* Unlinks this set from the given animation set
	* @param animSet The asset to unlink from
	* @returns True if any link was removed, else false
	*/
	inline bool UnlinkFrom(class UFaceFxAnimSet* animSet)
	{
		return m_animationSets.Remove(animSet) > 0;
	}

#endif //WITH_EDITOR

	/**
	* Gets the FaceFX data for the current target platform
	* @returns The data for the current target platform
	*/
	inline FFaceFxActorData& GetData()
	{
		checkf(m_platformData.Num(), TEXT("Asset not initialized yet."));

		//always take the first entry.
		//For non-cooked this will always be PC
		//For cooked this will always be the data from the target platform
		return m_platformData[0];
	}

	/**
	* Gets the FaceFX data for the current target platform
	* @returns The data for the current target platform
	*/
	inline const FFaceFxActorData& GetData() const
	{
		checkf(m_platformData.Num(), TEXT("Asset not initialized yet."));

		//always take the first entry.
		//For non-cooked this will always be PC
		//For cooked this will always be the data from the target platform
		return m_platformData[0];
	}

	/**
	* Checks if this FaceFX data asset it valid
	* @returns True if valid, else false
	*/
	virtual bool IsValid() const override
	{
		return IsAssetPathSet() && m_platformData.Num() > 0;
	}

	/**
	* Gets a specific animation data entry from the set
	* @param animGroup the animation group to look for
	* @param animName The animation to look for
	* @returns The animation data if found, else nullptr
	*/
	const FFaceFxAnimData* GetAnimation(const FName& animGroup, const FName& animName) const;

	/**
	* Gets a specific animation data entry from the set
	* @param animGroup the animation group to look for
	* @param animName The animation to look for
	* @returns The animation data if found, else nullptr
	*/
	inline const FFaceFxAnimData* GetAnimation(const FFaceFxAnimId& animId) const
	{
		return GetAnimation(animId.m_group, animId.m_name);
	}

	/**
	* Gets the number of animations which are encapsulated in this asset
	* @return The animation count
	*/
	virtual int32 GetAnimationCount() const override;

	/**
	* Gets the details in a human readable string representation
	* @param outDetails The resulting details string
	*/
	virtual void GetDetails(FString& outDetails) const override;

	/**
	* Gets all animation groups
	* @param outGroups The animation groups
	*/
	void GetAnimationGroups(TArray<FName>& outGroups) const;

	/**
	* Gets the animation set that matches the given group name
	* @param group The group to get the animation set from
	* @returns The matching animation set or nullptr if not found
	*/
	class UFaceFxAnimSet* GetAnimationSet(const FName& group) const;

private:

	/** The data inside this data set. Its a list of data per platform. Indices: x86, PS4, XBoxOne. Will only contain one entry in cooked data */
	UPROPERTY(EditInstanceOnly, Category=FaceFX)
	TArray<FFaceFxActorData> m_platformData;

	/** The linked animation sets where this set look up the animations in */
	UPROPERTY(EditInstanceOnly, Category=FaceFX)
	TArray<class UFaceFxAnimSet*> m_animationSets;
};